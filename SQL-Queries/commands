select * from actor; 
-- select first_name,last_name from actor;

select * from customer;
select first_name,last_name,email from customer;

select distinct first_name from customer;
select * from film;
select distinct release_year from film;
select distinct (rental_rate) from film;
select distinct (rating) from film;

select * from payment
-- select count(*)from payment will return the no. of rows
select count(amount)from payment
select count (distinct (amount)) from payment

select * from customer
where first_name='Jared'

select * from film
where rental_rate>4 and replacement_cost>23.99 and rating ='R'

select count(title) from film
where rental_rate>4 and replacement_cost>23.99 and rating ='R'

select count(*) from film
where rental_rate>4 and replacement_cost>23.99 and rating ='R' or rating ='PG-13'

select * from film
where rating !='R'

-- What is the email of the cx with the name Nancy Thomas
select email from customer where first_name='Nancy' and last_name='Thomas'
select * from customer

select description from film where title='Outlaw Hanky'

select phone from address where address='259 Ipoh Drive' 

select * from customer
order by first_name desc

select store_id,first_name,last_name from customer
order by store_id,first_name,last_name asc

select * from payment
order by payment_date desc
limit 5 

select customer_id from customer
order by customer_id asc
limit 10

-- title of 5 shortest films
select title,length from film
-- where length <47
order by length
limit 5

SELECT COUNT(title) FROM film
where length<=50

select * from payment
WHERE amount BETWEEN 8 AND 9

-- total number of transactions
SELECT count(*) FROM payment
WHERE amount NOT BETWEEN 8 and 

SELECT count(*) FROM payment
WHERE payment_Date BETWEEN '2007-02-01' AND '2007-02-15'

SELECT DISTINCT(amount) FROM payment
WHERE amount IN(0.99,1.98,1.99)

SELECT DISTINCT(amount) FROM payment
WHERE amount NOT IN(0.99,1.98,1.99)

SELECT * FROM customer
WHERE first_name IN ('John','Jake','Julie')

SELECT first_name,last_name FROM customer
WHERE first_name LIKE 'J%' and last_name LIKE 'S%'
 
SELECT first_name,last_name FROM customer
WHERE first_name ILIKE 'j%' and last_name ILIKE 's%'

-- any one who has 'er'anywhere in there name
SELECT * FROM customer
WHERE first_name LIKE '%er%'

SELECT * FROM customer
WHERE first_name  NOT LIKE '_her%'

SELECT * FROM customer
WHERE first_name LIKE 'A%' AND last_name NOT LIKE 'B%'
ORDER BY last_name

--How many payment transactions >5.00 $
SELECT COUNT(*) FROM payment
WHERE amount >5.

-- How many actors have first name that starts with letter P?
SELECT * FROM actor
WHERE first_name LIKE 'P%'

--How many unique districts are our customers from?
SELECT  COUNT(DISTINCT(address)) FROM address
SELECT  DISTINCT(address) FROM address

--How many films have a rating R and a replacement cost between $5 and $15?
SELECT COUNT(*) FROM film
WHERE rating='R'AND replacement_cost BETWEEN 5 AND 15

--How many films have word 'Truman' somewhere in the title
SELECT COUNT(*) FROM film
WHERE title LIKE '%Truman%'

SELECT MIN(replacement_cost),film_id from film

SELECT ROUND(AVG(replacement_cost)) from film

--If i wish to round of to 2 decimal places 
SELECT ROUND(AVG(replacement_cost),2) from film 

SELECT customer_id FROM payment
GROUP BY customer_id
ORDER BY customer_id

SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount)--Total sum amount "per" customer id

SELECT customer_id,COUNT(amount) FROM payment
GROUP BY customer_id
ORDER BY COUNT(amount)

SELECT staff_id,customer_id,SUM(amount) FROM payment--Total amount spent per staff per cx
GROUP BY staff_id,customer_id -- We can group by multiple cols
ORDER BY staff_id,customer_id

SELECT DATE(payment_date),SUM(amount) FROM payment
GROUP BY DATE(payment_date)
ORDER BY SUM(amount)DESC

-- How many payments did each staff member handle and who gets the bonus
SELECT staff_id,COUNT(amount)
FROM payment
GROUP BY staff_id
ORDER BY COUNT(payment)

--What is the avg replacement cost per MPAA rating
SELECT rating,ROUND(AVG(replacement_cost),2) FROM film
GROUP BY rating

--What are the cx id of top 5 cx by total spend
select * from payment
SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
ORDER BY SUM(amount) DESC
LIMIT 5

SELECT customer_id,SUM(amount) FROM payment
GROUP BY customer_id
HAVING SUM(amount)>100

SELECT store_id,count(*) FROM CUSTOMER
GROUP BY store_id
having COUNT(*)>300

--Assigning platinum status to cxs taht have 40 or more transaction payments.What cx_id are eligible
SELECT * from payment
SELECT customer_id,COUNT(*) from payment
GROUP BY customer_id
HAVING COUNT(*)>=40

--cx_ids of cx who have spent >100$ in payment transaction with staff_id member 2
SELECT customer_id,SUM(amount) FROM payment
WHERE staff_id=2
GROUP BY customer_id
HAVING SUM(amount)>100

--return the cx_id of cx who spent at least 110 with the staff member who has an id of 2
SELECT * FROM payment
SELECT customer_id,SUM(amount) from payment
WHERE staff_id=2
GROUP BY customer_id
HAVING SUM(AMOUNT)>=110

--How many films begin with letter J
SELECT COUNT(*) from film
WHERE title LIKE 'J%'

--cx with highest cx_id number whose name starts with 'E' and address id <500
SELECT * from customer
SELECT first_name,last_name FROM customer
WHERE  first_name LIKE 'E%' AND address_id<500 
ORDER BY customer_id DESC
LIMIT 1

SELECT COUNT(*) AS num_transactions
FROM payment

SELECT customer_id,SUM(amount) AS total_spent
FROM payment
GROUP BY customer_id
HAVING SUM(amount)>100

------Joins-----
--INNER JOIN----
SELECT * FROM payment
INNER JOIN customer
ON payment.customer_id=customer.customer_id

SELECT payment_id,payment.customer_id,first_name
FROM payment
INNER JOIN customer
ON payment.customer_id=customer.customer_id

SELECT * FROM customer
FULL OUTER JOIN payment
ON customer.customer_id = payment.customer_id
WHERE customer.customer_id IS null
OR payment.payment_id IS null

SELECT film.film_id,title,inventory_id,store_id
FROM film
LEFT JOIN inventory ON
inventory.film_id=film.film_id
WHERE inventory.film_id IS null

--What are the emails of teh cxs who live in California

SELECT district,email FROM address
INNER JOIN customer
ON address.address_id = customer.address_id
WHERE district='California'

--Get the list of all movies "Nick Wahlberg" has been in
SELECT title,first_name,last_name FROM actor
INNER JOIN  film_actor 
ON actor.actor_id = film_actor.actor_id
INNER JOIN film
ON film.film_id = film_actor.film_id
WHERE first_name='Nick' AND last_name='Wahlberg'

--Advanced SQL commands---
SHOW ALL
SHOW TIMEZONE
SELECT NOW()
SELECT TIMEOFDAY()
SELECT CURRENT_DATE

SELECT EXTRACT(YEAR FROM payment_date) AS my_year
FROM payment 

SELECT EXTRACT(MONTH FROM payment_date) AS my_month
FROM payment 

SELECT EXTRACT(QUARTER FROM payment_date) AS my_month
FROM payment 

SELECT AGE(payment_date)
FROM payment 

SELECT TO_CHAR(payment_date,'MONTH-YYYY')
FROM payment 

SELECT TO_CHAR(payment_date,'MM/DD/YYYY')
FROM payment

--Get the month of the payment"
SELECT DISTINCT(TO_CHAR(payment_date,'MONTH'))
FROM payment 

--How many payments occured on Monday?
SELECT COUNT(*)
FROM payment
WHERE(TO_CHAR(payment_date,'DAY')) ILIKE 'Monday '

SELECT COUNT(*)
FROM payment
WHERE EXTRACT(DOW FROM payment_date)=1

--Mathematical functions
Select ROUND(rental_rate/replacement_cost,2)*100 AS percent_cost FROM film

--10% of RC
SELECT 0.1*replacement_cost AS deposit from film

--String concatenation
SELECT LENGTH(first_name) FROM customer

SELECT first_name||' '||last_name AS fullname FROM customer

SELECT UPPER(first_name)||' '||UPPER(last_name) AS fullname FROM customer

SELECT LOWER(LEFT(first_name,1))||LOWER(last_name)||'@gmail.com' AS custom_email FROM customer

--Subquery

--return films having rental rate >avg rental rate of the films
SELECT title,rental_rate FROM film
WHERE rental_rate>(SELECT AVG(rental_rate) FROM film)

SELECT film_id,title FROM film
WHERE film_id IN(SELECT inventory.film_id FROM rental 
INNER JOIN inventory ON 
inventory.inventory_id=rental.inventory_id
WHERE return_date BETWEEN '2005-05-29' AND '2005-05-30')
ORDER BY film_id

--to find out cxs who have a payment>11
SELECT first_name,last_name 
FROM customer AS cx
WHERE EXISTS(SELECT * from payment as p Where p.customer_id=cx.customer_id AND amount>11)

--




 




